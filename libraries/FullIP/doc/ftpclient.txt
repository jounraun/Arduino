
FullIP FTP Client
*****************


Installation
============

Download and install FullIP (Look at "Installation instructions").

Uncomment #define FULLIP_SD to enable SD in FullIP.h.


Usage
=====

* Define a variable for the FTP client :

   FtpClient ftpclient;

* Initialize the SD and start the FTP client :

   pinMode(PIN_SD_CS, OUTPUT);
   if (!SD.begin(PIN_SD_CS)) {
       Serial.println("SD failed :");
   } else {
       Serial.println("SD configured :)");
   }
   ftpclient.begin(server_name,user_name,password);

* Send a file  :

   ftpclient.sendFile(filename2,local_dir,remote_dir)

* Or retrieve one :

   ftpclient.getFile(filename2,local_dir,remote_dir)

* And process it in your loop :

   ftpclient.maintain();


Class definition
================

*class* **FtpClient**

   The FTP client.

   *Public Functions*

      uint8_t **begin**(const IPAddress & aFTPServer, const char * userstr, const char * passstr)

         Initialize FTP the ftp client

         **Return**
            1 if the operation succeed. 0 if it fails.

         **Parameters**
            * "aFTPServer" -
              the IPAddress of the FTP server.

            * "userstr" -
              the user used to connect to the server.

            * "passstr" -
              the password of the user.

      uint8_t **begin**(const char * aFTPHost, const char * userstr, const char * passstr)

         Initialize FTP the ftp client

         **Return**
            1 if the operation succeed. 0 if it fails.

         **Parameters**
            * "aFTPHost" -
              the host name of the FTP server.

            * "userstr" -
              the user used to connect to the server.

            * "passstr" -
              the password of the user.

      uint8_t **end**()

         Release ressources Must be called if you don't want to send
         file anymore

      uint8_t **sendFile**(const char * filename, const char * localdir, const char * remotedir)

         Send a file

         **Return**
            1 if the file is in queue. 0 if it fails.

         **Parameters**
            * "filename" -
              the name of the file to transfer.

            * "localdir" -
              the local directory.

            * "remotedir" -
              the remote directory.

      uint8_t **getFile**(const char * filename, const char * localdir, const char * remotedir)

         Get a file

         **Return**
            1 if the file is in queue. 0 if it fails.

         **Parameters**
            * "filename" -
              the name of the file to transfer.

            * "localdir" -
              the local directory.

            * "remotedir" -
              the remote directory.

      void **maintain**()

         Send the file in "background" Must be called in your loop

      uint8_t **isSent**()

         Was the last file sent ?

         **Return**
            1 if the file was sent.

      uint8_t **isReceived**()

         Was the last file received ?

         **Return**
            1 if the file was received.

   *Public Members*

      long **lastResponse**

         The last response code sent by the server.

      long **lastTransfer**

         The last response code sent by the server for the file
         transfer.

      unsigned long **stats_start**

         The start of the transfer. Only available is compiled with
         FULLIP_DEBUG_STATS directive.

      unsigned long **stats_duration**

         The duration of the transfer. Only available is compiled with
         FULLIP_DEBUG_STATS directive.

      unsigned long **stats_size**

         The size of data sent. Only available is compiled with
         FULLIP_DEBUG_STATS directive.
